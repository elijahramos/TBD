import Myencrypt
import os
import cnsts

def norm(filePath):
	fileObj = open(filePath, "rb") #open file, and save the referance for l8r
	location = filePath.rstrip(os.path.basename(fileObj.name)) # cut off the file's dir
	cutt = (os.path.basename(fileObj.name)).partition('.') # we cutout the file's name and ext
	
	fileString = fileObj.read()
	key = os.urandom(cnsts.keyLength) #Generate a 32 byte key
	fileEncrypt = Myencrypt.norm(fileString, key) #Store the cipher and IV generated by Myencrypt.norm
	C = fileEncrypt[0] #Create C variable to store the cipher from Myencrypt
	IV = fileEncrypt[1] #Create IV variable to store the IV from Myencrypt
	return [C, IV, key,location,cutt[0],cutt[2]] #Return C, IV, key,fileDir,fileName,fileExt

# there was a conflict between these functions that basically breaks MyRSAEncrypt.inv()
# norm needed to return the filePath so that the inv could actually goto where the cipher text was, instead of simply having, the cipher text.
    
def inv(filePath, IV, key):
	# if the C byte string from the first function was directly saved to a file
	#this function can be called, along with the IV and key, to decrypt it.
	C = open(filePath, "rb").read() #more file IO stuffs
	return Myencrypt.inv(C, IV, key) #Return the decrypted bytes obtained from Myencrypt
    
