import Myencrypt
import os
import cnsts

def norm(filePath):
    fileString = open(filepath, "rb").read()            #Open the file and store it into fileString as bytes
    key = os.urandom(cnsts.keyLength)                   #Generate a 32 byte key
    fileEncrypt = Myencrypt.norm(fileString, key)       #Store the cipher and IV generated by Myencrypt.norm
    C = fileEncrypt[0]                                  #Create C variable to store the cipher from Myencrypt
    IV = fileEncrypt[1]                                 #Create IV variable to store the IV from Myencrypt
    open((filePath+".enc"), "wb").write(C)              #Create encrypted file and write the contents of the cipher into it
    return [filePath, IV, key, ".enc"]                  #Return C (file path actually), IV, key, and the extension of the encrypted file as a string

# there was a conflict between these functions that basically breaks MyRSAEncrypt.inv()
# norm needed to return the filePath so that the inv could actually goto where the cipher text was, instead of simply having, the cipher text.
    
def inv(filePath, IV, key, ext):
    fileString = open(filePath+ext, "rb").read()        #Open the encrypted file and store it into fileString as bytes
    return Myencrypt.inv(fileString, IV, key)           #Return the decrypted bytes obtained from Myencrypt
    
